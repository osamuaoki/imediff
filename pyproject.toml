[project]
# This is the name of your project. The first time you publish this
# package, this name will be registered for you. It will determine how
# users can install this project, e.g.:
#
# $ pip install sampleproject
#
# And where it will live on PyPI: https://pypi.org/project/sampleproject/
#
# There are some restrictions on what makes a valid project name
# specification here:
# https://packaging.python.org/specifications/core-metadata/#name
name = "imediff"  # Required

# Versions should comply with PEP 440:
# https://www.python.org/dev/peps/pep-0440/
#
# For a discussion on single-sourcing the version, see
# https://packaging.python.org/guides/single-sourcing-package-version/
#version = "2.8.0"  # Required
dynamic = ["version"]

# This is a one-line description or tagline of what your project does. This
# corresponds to the "Summary" metadata field:
# https://packaging.python.org/specifications/core-metadata/#summary
description = "2-way/3-way merge tool (CLI, Ncurses)"

# This is an optional longer description of your project that represents
# the body of text which users will see when they visit PyPI.
#
# Often, this is the same as your README, so you can just read it in from
# that file directly (as we have already done above)
#
# This field corresponds to the "Description" metadata field:
# https://packaging.python.org/specifications/core-metadata/#description-optional
readme = {file = "README.md", content-type = "text/markdown"}

# Specify which Python versions you support. In contrast to the
# 'Programming Language' classifiers above, 'pip install' will check this
# and refuse to install the project if the version does not match. See
# https://packaging.python.org/guides/distributing-packages-using-setuptools/#python-requires
requires-python = ">=3.9"

# This is either text indicating the license for the distribution, or a file
# that contains the license
# https://packaging.python.org/en/latest/specifications/core-metadata/#license

## The following needed to be commented out to work with "twine check"
license = {file = "LICENSE"}

# This field adds keywords for your project which will appear on the
# project page. What does your project relate to?
#
# Note that this is a list of additional keywords, separated
# by commas, to be used to assist searching for the distribution in a
# larger catalog.
keywords = ["imediff", "merge", "diff", "cli", "ncurses", "git-ime", "ime"]  # Optional

# This should be your name or the name of the organization who originally
# authored the project, and a valid email address corresponding to the name
# listed.
authors = [
  {name = "Osamu Aoki", email = "osamu@debian.org" },
  {name = "Jarno Elonen", email = "elonen@iki.fi" }
]

# This should be your name or the names of the organization who currently
# maintains the project, and a valid email address corresponding to the name
# listed.
maintainers = [
  {name = "Osamu Aoki", email = "osamu@debian.org" }
]

# Classifiers help users find your project by categorizing it.
#
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [  # Optional
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 5 - Production/Stable",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Topic :: Text Processing :: General",

  # Pick your license as you wish
  "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "python_requires" below.
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3 :: Only",
  # Others
  "Environment :: Console :: Curses",
  "Operating System :: POSIX :: Linux",
]

# This field lists other packages that your project depends on to run.
# Any package you put here will be installed by pip when your project is
# installed, so they must be valid existing projects.
#
# For an analysis of this field vs pip's requirements files see:
# https://packaging.python.org/discussions/install-requires-vs-requirements/
#dependencies = [ # Optional
#  "peppercorn"
#]

# List additional groups of dependencies here (e.g. development
# dependencies). Users will be able to install these using the "extras"
# syntax, for example:
#
#   $ pip install sampleproject[dev]
#
# Similar to `dependencies` above, these must be valid existing
# projects.
[project.optional-dependencies] # Optional
dev = ["check-manifest"]
#test = ["coverage"]
##### test_suite = test.test_diff23lib

# List URLs that are relevant to your project
#
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
# https://packaging.python.org/specifications/core-metadata/#project-url-multiple-use
# https://packaging.python.org/specifications/core-metadata/#home-page-optional
#
# Examples listed include a pattern for specifying where the package tracks
# issues, where the source is hosted, where to say thanks to the package
# maintainers, and where to support the project financially. The key is
# what's used to render the link text on PyPI.
[project.urls]  # Optional
"Homepage" = "https://github.com/osamuaoki/imediff"
"Bug Reports" = "https://github.com/osamuaoki/imediff/issues"
##"Funding" = "https://donate.pypi.org"
##"Say Thanks!" = "http://saythanks.io/to/example"
"Source" = "https://github.com/osamuaoki/imediff/"

# The following would provide a command line executable called `sample`
# which executes the function `main` from this package when invoked.
[project.scripts]  # Optional
imediff = "imediff:main"
imediff_install = "imediff:install"

# This is configuration specific to the `setuptools` build backend.
# If you are using a different build backend, you will need to change this.
[tool.setuptools]

[tool.setuptools.package-data]
# If there are data files included in your packages that need to be
# installed, specify them here for each module.
# https://setuptools.pypa.io/en/latest/userguide/datafiles.html#package-data
# regex https://git-scm.com/docs/gitignore
imediff = ["data/*"]

[tool.setuptools.dynamic]
# https://packaging.python.org/en/latest/guides/single-sourcing-package-version/#single-sourcing-the-version
# Use setuptools >=61.0.0
version = {attr = "imediff.version"}

[tool.setuptools_scm]
# https://github.com/pypa/setuptools_scm
# For release, git tag should match version in the following file
# Otherwise, build process will overwrite value based on git repo state.
# Currently for pipy.org dynamic updated for development build unless tag match.
# Prepend "# " for pipy.org static release build with matching tag in the git repo.
# Prepend "# " for debian release build with matching tag in the git repo.
version_file = "src/imediff/_version.py"

[build-system]
# https://peps.python.org/pep-0518/
# https://github.com/pypa/setuptools/pull/3056 (drop wheel)
# https://setuptools-scm.readthedocs.io/en/latest/
requires = ["setuptools>=61.0.0", "setuptools-scm"]
# https://peps.python.org/pep-0517/
build-backend = "setuptools.build_meta"

